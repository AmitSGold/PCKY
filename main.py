from pcfg import PCFG, PRule
import re

def main():
    grammar_file = open("grammar.txt", "r")
    rules = {}
    for line in grammar_file:
        line = re.sub('[^A-z0-9\- .|]', '', line)
        line_words = line.split(" ")
        if line_words[0] != "" and len(line_words) > 1:
            if line_words[0] == "start_variable":
                start_variable = line_words[1]
            
            elif len(line_words) > 2:
                if "|" not in line_words: #GRAMMAR section
                    variable = line_words[0]
                    if variable in rules:
                        rules[variable].append(PRule(variable,line_words[2:-1],\
                                                line_words[-1][1:-1]))
                    else:
                        rules[variable] = [PRule(variable,line_words[2:-1],\
                                                line_words[-1][1:-1])]
    
                else: #LEXICON section
                    bar_indices =[1] + [i for i,j in enumerate(line_words) if j == "|"] +\
                        [len(line_words)]
         
                    for i in range(len(bar_indices) - 1): #divide by bars
                        variable = line_words[0]
                        if variable in rules:
                            rules[variable].append(PRule(variable,line_words[bar_indices[i]+1:bar_indices[i+1]-1],\
                                                line_words[bar_indices[i+1]-1][1:-1]))
                            
                        else:
                            rules[variable] = [PRule(variable,line_words[bar_indices[i]+1:bar_indices[i+1]-1],\
                                                line_words[bar_indices[i+1]-1][1:-1])]
       
    grammar_file.close()
    pcfg = PCFG(start_variable, rules)
    ncnf = pcfg.to_near_cnf()
    print(ncnf.rules)
    data = open('data.txt', 'r')
    for line in data:
        if line != '\n':
            line = re.sub('[\n]','',line)
            tree = ncnf.cky_parser(line)
            if  tree == None:
                print("The sentence '" + line + "' is not generated by the grammar")
            else:
                print("Sentecne: '" + line + "'")
                print("Tree in Near-CNF:")
                print(tree)
                print("Tree in the original PCFG:")
                print(ncnf.adjust_near_cnf_ptree(tree, ncnf.changes))
                print()
    
    data.close()


    
if __name__ == '__main__':
   main()
    